using System;
using System.Collections.Generic;
using System.Text;
using System.Xml;

namespace Mapper.Common
{
    /// <summary>
    /// XML representation of multiple <code>LotFilter</code> objects.
    /// </summary>
    public class LotFiltersXmlElement : SelfManagedXmlNode
    {
        #region private fields

        private List<LotFilter> values;

        #endregion

        #region constructors

        /// <summary>
        /// Creates new instance with the given tag name.
        /// </summary>
        /// <param name="name">The name of XML tag which will contain lot filters.</param>
        public LotFiltersXmlElement(string name)
            : base(name) { }

        #endregion

        #region public methods

        public override System.Xml.XmlNode WriteTo(XmlNode parent)
        {
            XmlElement lotsElement = parent.SelectSingleNode("child::" + name) as XmlElement;
            if (lotsElement != null)
            {
                parent.RemoveChild(lotsElement);
            }

            lotsElement = parent.OwnerDocument.CreateElement(name);
            parent.AppendChild(lotsElement);

            if (values != null)
            {
                foreach (LotFilter lot in values)
                {
                    XmlElement lotElement = parent.OwnerDocument.CreateElement("LotFilter");
                    lotsElement.AppendChild(lotElement);

                    XmlAttribute maskAttribute = parent.OwnerDocument.CreateAttribute("LotIdMask");
                    maskAttribute.Value = lot.Mask.ToString();
                    lotElement.Attributes.Append(maskAttribute);

                    XmlAttribute semiChecksumAttribute = parent.OwnerDocument.CreateAttribute("LaserscribesHaveSemiChecksum");
                    semiChecksumAttribute.Value = lot.LaserscribesHaveSemiChecksum.ToString();
                    lotElement.Attributes.Append(semiChecksumAttribute);
                }
            }

            return null;
        }

        public override System.Xml.XmlNode ReadFrom(XmlNode parent)
        {
            values = new List<LotFilter>();

            XmlElement lotsElement = parent.SelectSingleNode("child::" + name) as XmlElement;
            if (lotsElement != null)
            {
                XmlNodeList lotElements = lotsElement.SelectNodes("child::LotFilter");

                foreach (XmlNode lotNode in lotElements)
                {
                    if (lotNode is XmlElement)
                    {
                        XmlElement lotElement = lotNode as XmlElement;

                        string mask = lotElement.Attributes.GetNamedItem("LotIdMask").Value;

                        LotFilter lot = new LotFilter(mask);

                        lot.LaserscribesHaveSemiChecksum = Boolean.Parse(lotElement.Attributes.GetNamedItem("LaserscribesHaveSemiChecksum").Value);

                        values.Add(lot);
                    }
                }
            }

            return null;
        }

        public override void AddChild(SelfManagedXmlNode child)
        {
            throw new InvalidOperationException("Can not add children to this type of node.");
        }

        #endregion

        #region public properties

        /// <summary>
        /// List of lot filters read or to be stored into XML.
        /// </summary>
        public List<LotFilter> Values
        {
            get { return values; } // TODO clone
            set
            {
                OutOfSync = true;
                this.values = value;
            } // TODO clone
        }

        #endregion
    }
}
